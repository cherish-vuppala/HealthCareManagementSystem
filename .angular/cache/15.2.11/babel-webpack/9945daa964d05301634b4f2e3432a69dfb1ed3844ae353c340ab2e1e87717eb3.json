{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { Doctor } from '../models/doctor';\nimport { User } from '../models/user';\nimport { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst NAV_URL = environment.apiURL;\nexport class LoginService {\n  constructor(_http) {\n    this._http = _http;\n    this.user = new User();\n    this.doctor = new Doctor();\n  }\n  loginUserFromRemote(user) {\n    return this._http.post(`${NAV_URL}/loginuser`, user).pipe(map(data => {\n      sessionStorage.setItem('USER', user.email);\n      sessionStorage.setItem('ROLE', 'USER');\n      sessionStorage.setItem('TOKEN', `Bearer ${data.token}`);\n      return data;\n    }));\n  }\n  loginDoctorFromRemote(doctor) {\n    console.log(doctor);\n    return this._http.post(`${NAV_URL}/logindoctor`, doctor).pipe(map(data => {\n      sessionStorage.setItem('USER', doctor.email);\n      sessionStorage.setItem('ROLE', 'DOCTOR');\n      sessionStorage.setItem('TOKEN', `Bearer ${data.token}`);\n      return data;\n    }));\n  }\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem('USER');\n    if (user === null || user.length === 0) {\n      return false;\n    }\n    return true;\n  }\n  isDoctorLoggedIn() {\n    let user = sessionStorage.getItem('USER');\n    if (user === null || user.length === 0) {\n      return false;\n    }\n    return true;\n  }\n  isAdminLoggedIn() {\n    let user = sessionStorage.getItem('USER');\n    if (user === null || user.length === 0) {\n      return false;\n    }\n    return true;\n  }\n  getAuthenticatedToken() {\n    return sessionStorage.getItem('TOKEN');\n  }\n  getAuthenticatedUser() {\n    return sessionStorage.getItem('USER');\n  }\n  userType() {\n    return sessionStorage.getItem('ROLE');\n  }\n  adminLoginFromRemote(email, password) {\n    if (email === 'admin@gmail.com' && password === 'admin123') {\n      sessionStorage.setItem('user', email);\n      sessionStorage.setItem('ROLE', \"admin\");\n      return true;\n    }\n    return false;\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["environment","Doctor","User","map","NAV_URL","apiURL","LoginService","constructor","_http","loginUserFromRemote","user","post","pipe","data","sessionStorage","setItem","email","token","loginDoctorFromRemote","doctor","console","log","isUserLoggedIn","getItem","length","isDoctorLoggedIn","isAdminLoggedIn","getAuthenticatedToken","getAuthenticatedUser","userType","adminLoginFromRemote","password","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\cheri\\Downloads\\HealthCareManagement-main\\HealthCareManagement-main\\src\\app\\services\\login.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Doctor } from '../models/doctor';\nimport { User } from '../models/user';\nimport { map } from \"rxjs/operators\";\n\nconst NAV_URL = environment.apiURL;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  user = new User();\n  doctor = new Doctor();\n\n  constructor(private _http : HttpClient) { }\n  \n  public loginUserFromRemote(user : User)\n  {\n  return this._http.post<any>(`${NAV_URL}/loginuser`,user).pipe(\n    map(\n      data => {\n        sessionStorage.setItem('USER', user.email);\n        sessionStorage.setItem('ROLE', 'USER');\n        sessionStorage.setItem('TOKEN', `Bearer ${data.token}`);\n        return data;\n        }\n      )\n    );        \n  }\n\n  public loginDoctorFromRemote(doctor : Doctor)\n  {\n    console.log(doctor);\n    return this._http.post<any>(`${NAV_URL}/logindoctor`,doctor).pipe(\n    map(\n      data => {\n        sessionStorage.setItem('USER', doctor.email);\n        sessionStorage.setItem('ROLE', 'DOCTOR');\n        sessionStorage.setItem('TOKEN', `Bearer ${data.token}`);\n        return data;\n        }\n      )\n    ); \n  }\n\nisUserLoggedIn()\n{\n  let user = sessionStorage.getItem('USER');\n  if(user === null || user.length === 0) \n  {\n      return false;\n  }\n  return true;\n}\n\nisDoctorLoggedIn()\n{\n  let user = sessionStorage.getItem('USER');\n  if(user === null || user.length === 0) \n  {\n      return false;\n  }\n  return true;\n}\n\nisAdminLoggedIn()\n{\n  let user = sessionStorage.getItem('USER');\n  if(user === null || user.length === 0) \n  {\n      return false;\n  }\n  return true;\n}\n\ngetAuthenticatedToken() {\n  return sessionStorage.getItem('TOKEN');\n}\n\ngetAuthenticatedUser() {\n  return sessionStorage.getItem('USER');\n}\n\nuserType() {\n    return sessionStorage.getItem('ROLE');\n}\n\npublic adminLoginFromRemote(email: string, password: string)\n{\n  if(email === 'admin@gmail.com' && password === 'admin123') \n  {\n    sessionStorage.setItem('user', email);\n    sessionStorage.setItem('ROLE', \"admin\");\n    return true;\n  }\n  return false;\n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}