{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/login.service\";\nexport class UserGuard {\n  constructor(router, _service) {\n    this.router = router;\n    this._service = _service;\n  }\n  canActivate(route, state) {\n    if (this._service.isUserLoggedIn() && this._service.userType() === 'user' || this._service.userType() === 'USER') {\n      return true;\n    }\n    this.router.navigate(['login']);\n    return false;\n  }\n}\nUserGuard.ɵfac = function UserGuard_Factory(t) {\n  return new (t || UserGuard)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.LoginService));\n};\nUserGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserGuard,\n  factory: UserGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AASA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,MAAc,EAAUC,QAAuB;IAA/C,WAAM,GAAND,MAAM;IAAkB,aAAQ,GAARC,QAAQ;EAAkB;EAEtEC,WAAW,CAACC,KAA6B,EAAEC,KAA0B;IAEnE,IAAI,IAAI,CAACH,QAAQ,CAACI,cAAc,EAAE,IAAI,IAAI,CAACJ,QAAQ,CAACK,QAAQ,EAAE,KAAK,MAAM,IAAI,IAAI,CAACL,QAAQ,CAACK,QAAQ,EAAE,KAAK,MAAM,EAChH;MACE,OAAO,IAAI;;IAEb,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;IAC/B,OAAO,KAAK;EACd;;;mBAZWT,SAAS;AAAA;;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YAFR;AAAM","names":["UserGuard","constructor","router","_service","canActivate","route","state","isUserLoggedIn","userType","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\cheri\\Downloads\\HealthCareManagement-main\\HealthCareManagement-main\\src\\app\\guards\\user.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { LoginService } from '../services/login.service';\nimport { RegistrationService } from '../services/registration.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserGuard implements CanActivate \n{\n  constructor(private router: Router, private _service : LoginService) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) \n  {\n    if (this._service.isUserLoggedIn() && this._service.userType() === 'user' || this._service.userType() === 'USER') \n    {\n      return true;\n    }\n    this.router.navigate(['login']);\n    return false;\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}